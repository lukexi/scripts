#!/bin/bash

# Install ghc-prof-flamegraph
# stack install ghc-prof-flamegraph

openInWindow() {
    if hash open 2>/dev/null; then
        open "$@"
    else
        explorer "$@"
    fi
}

help_text="-h<break-down> Heap residency profile (hp2ps) (output file <program>.hp)
      break-down: c = cost centre stack (default)
                  m = module
                  d = closure description
                  y = type description
                  r = retainer
                  b = biography (LAG,DRAG,VOID,USE)"

# if [[ "$1" -eq '-h' ]]; then
#   echo $help_text

#   exit
# fi

TARGET=$1
if [ -z "$1" ]
  then
    TARGET=$(basename `pwd`)
fi

PROFTYPE=$2
if [ -z "$2" ]
  then
    PROFTYPE=-hc
fi

# Build the environment and executables with -prof.
# Make sure libraries have
# ghc-prof-options: -fprof-auto
# in their cabal files to generate SCCs
# and executables include -prof
stack build --executable-profiling --library-profiling || exit 1 # Don't continue if the build fails


# Allow the program to fail, as it will still generate a profile
trap "echo 'Killed'" INT

# We need to use this odd method of running rather than:
# stack exec $1 -- +RTS ${@:2} || echo "Exiting"
# as the -- doesn't seem to be triggering RTS options correctly on Windows
`stack exec which $TARGET` +RTS $PROFTYPE -p -s
trap - INT

# Generate a heap graph from the heap profile
stack exec hp2ps -- -c $TARGET.hp
openInWindow $TARGET.ps

# Generate a flame graph from the stack profile
prof-to-flamegraph $TARGET
openInWindow $TARGET.svg
